syntax = "proto3";
package stanza.hub.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "stanza/hub/v1/common.proto";

option go_package = "stanza/hub/v1;hubpb";
option java_multiple_files = true;
option java_package = "org.stanza.hub.v1";

// Experimental feature for fair prioritised balancing of streaming activities.
service StreamBalancerService {
  rpc UpdateStreams(UpdateStreamsRequest) returns (UpdateStreamsResponse) {
    option (google.api.http) = {
      post: "/v1/updatestreams"
      body: "*"
    };
  }
}

message UpdateStreamsRequest {
  string guard_name = 1 [(google.api.field_behavior) = REQUIRED];
  string environment = 2 [(google.api.field_behavior) = REQUIRED];

  repeated StreamRequest requests = 3;
  repeated string ended = 4; // IDs of streams that have completed
}

message UpdateStreamsResponse {
  repeated StreamResult results = 1;
}

message StreamRequest {
  string feature = 1; // optional - if specified then the request inherits the feature priority

  repeated Tag tags = 2; // refers to tags specified in the Guard configuration, used to fairly allocate quota

  optional int32 priority_boost = 3; // optional - allows priority to be increased or reduced relative to normal default or feature priority.

  // Unique identifier for this stream - may be meaningful or a UUID. Assigned by requestor.
  string stream_id = 4 [(google.api.field_behavior) = REQUIRED];

  // Maximum weight that may be allocated to this stream
  float max_weight = 5 [(google.api.field_behavior) = REQUIRED];

  // Minimum weight that may be allocated to this stream. If this weight cannot be allocated then the stream cannot be served.
  float min_weight = 6 [(google.api.field_behavior) = REQUIRED];
}

message StreamResult {
  // Unique identifier for this stream - as described in StreamRequest mesage.
  string stream_id = 1 [(google.api.field_behavior) = REQUIRED];

  // Weight allocated to this stream. Zero means it was not allocated.
  float allocated_weight = 2;

  // TODO: Return a reason code.
}
