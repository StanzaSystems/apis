syntax = "proto3";
package stanza.hub.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "stanza/hub/v1/common.proto";

option go_package = "stanza/hub/v1;hubpb";
option java_multiple_files = true;
option java_package = "org.stanza.hub.v1";

// Experimental feature for fair prioritised balancing of streaming activities.
service StreamBalancerService {
  rpc UpdateStreams(UpdateStreamsRequest) returns (UpdateStreamsResponse) {
    option (google.api.http) = {
      post: "/v1/updatestreams"
      body: "*"
    };
  }
}

message UpdateStreamsRequest {
  GuardFeatureSelector selector = 1 [(google.api.field_behavior) = REQUIRED];
  repeated StreamRequest requests = 2;
  repeated string ended = 3; // IDs of streams that have completed 
}

message UpdateStreamsResponse {
  repeated StreamResult results = 1;
}

message StreamRequest {
  // Used to increase or decrease priority of request, relative to normal feature priority.
  // For instance, a customer may wish to boost the priority of paid user traffic over free tier. Priority boosts may also be negative - for example, one might deprioritise bot traffic.
  optional int32 priority_boost = 1;

  // Unique identifier for this stream - may be meaningful or a UUID.
  string stream_id = 2;

  // Maximum weight that may be allocated to this stream
  float max_weight = 3;

  // Minimum weight that may be allocated to this stream. If this weight cannot be allocated then the stream cannot be served.
  float min_weight = 4;
}

message StreamResult {
  // Unique identifier for this stream - may be meaningful or a UUID.
  string stream_id = 1;

  // Weight allocated to this stream. Zero means it was not allocated.
  float allocated_weight = 2;

  // TODO: Return a reason code.
}
