syntax = "proto3";
package stanza.hub.v1;
option go_package = "stanza/hub/v1;hubpb";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "stanza/hub/v1/common.proto";

// The Health service definition. This service is used by the Stanza SDK to allow devs to
//   make decisions about graceful degradation strategies to apply and to make decisions
//   about fail-fast as high up the stack as possible.
// "Keys" - API bearer tokens - are not included in API and should be sent via a X-Stanza-Key header.
// Customer IDs are determined based on the X-Stanza-Key header (each key is associated
// with one and only one customer).
// However, env must always be specified - stanza keys do not have to be
// specific to an environment, so we cannot infer the env from the key.
// Like quota service this should be accessed by SDK via HTTPS.
service HealthService {
  rpc QueryDecoratorHealth(QueryDecoratorHealthRequest) returns (QueryDecoratorHealthResponse) {
    option (google.api.http) = {get: "/v1/health/decorator"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get decorator health information."
      description: "Used by SDK to allow developers to make decisions about graceful degradation of backend services."
      responses: {
        key: "429"
        value: {description: "Unable to service request, try again after Retry-After."}
      }
    };
  }
}

// Called by SDK to determine whether a Decorator is overloaded at a given Feature's priority level.
// Used so that customer code can make good decisions about fail-fast or graceful degradation as high
// up the stack as possible.
// SDK may cache the result for up to 10 seconds.
message QueryDecoratorHealthRequest {
  // Only tags which are used for quota management should be included here - i.e. the list of quota_tags returned
  //   by the GetDecoratorConfig endpoint for this Decorator.
  // Health of the decorator with respect to the specified tags will be returned.
  // If tags are omitted, health of decorator only with respect to the specified feature priority and boost will be returned.
  DecoratorFeatureSelector s = 1; // Required: decoratorName, featureName, environment

  // Used to boost priority - SDK can increase or decrease priority of request, relative to normal feature priority.
  //  For instance, a customer may wish to boost the priority of paid user traffic over free tier.
  //  Priority boosts may also be negative - for example, one might deprioritise bot traffic.
  int32 priority_boost = 4;
}

// HEALTH_UNSPECIFIED = 0; HEALTH_OK = 1; HEALTH_OVERLOAD = 2; HEALTH_DOWN = 3;
message QueryDecoratorHealthResponse {
  Health health = 1;
}
