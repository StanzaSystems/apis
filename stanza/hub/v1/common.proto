syntax = "proto3";
package stanza.hub.v1;

import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "stanza/hub/v1;hubpb";
option java_multiple_files = true;
option java_package = "org.stanza.hub.v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Stanza Hub API",
    version: "1.0"
    contact: {
      name: "Stanza",
      url: "https://stanza.systems",
      email: "support@stanza.systems"
    }
  };
  external_docs: {
    url: "https://stanza.stoplight.io/docs/apis/291a2cff9d156-stanza-hub-api";
    description: "Stanza Hub API";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-Stanza-Key";
      }
    }
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  }
  responses: {
    key: "429"
    value: {
      description: "Too Many Requests, try again after Retry-After."
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal Server Error"
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
  responses: {
    key: "503"
    value: {
      description: "Service Unavailable, try again after Retry-After."
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
};

///////////////////////////////////////////////////////////////////////////////
//
// Type Selectors
//
///////////////////////////////////////////////////////////////////////////////

message GuardSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  repeated Tag tags = 6;
}

message FeatureSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  repeated string names = 2;
  repeated Tag tags = 6;
}

message GuardFeatureSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string guard_name = 2 [(google.api.field_behavior) = REQUIRED];
  optional string feature_name = 3;
  repeated Tag tags = 6;
}

message GuardServiceSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string guard_name = 2 [(google.api.field_behavior) = REQUIRED];
  string service_name = 3 [(google.api.field_behavior) = REQUIRED];
  string service_release = 4 [(google.api.field_behavior) = REQUIRED];
  repeated Tag tags = 6;
}

message ServiceSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  optional string release = 3;
  repeated Tag tags = 6;
}

///////////////////////////////////////////////////////////////////////////////
//
// Health, State, and Tags
//
///////////////////////////////////////////////////////////////////////////////

enum Health {
  HEALTH_UNSPECIFIED = 0;
  HEALTH_OK = 1;
  HEALTH_OVERLOAD = 2;
  HEALTH_DOWN = 3;
}

message HealthByPriority {
  uint32 priority = 1;
  Health health = 2;
}

enum State {
  STATE_UNSPECIFIED = 0;
  STATE_ENABLED = 1;
  STATE_DISABLED = 2;
}

message Tag {
  string key = 1;
  string value = 2;
}
