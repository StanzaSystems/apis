syntax = "proto3";
package stanza.hub.v1;

import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "stanza/hub/v1;hubpb";
option java_multiple_files = true;
option java_package = "org.stanza.hub.v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Stanza Hub API",
    version: "1.0"
    contact: {
      name: "Stanza",
      url: "https://stanza.systems",
      email: "support@stanza.systems"
    }
  };
  external_docs: {
    url: "https://stanza.stoplight.io/docs/apis/291a2cff9d156-stanza-hub-api";
    description: "Stanza Hub API";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-Stanza-Key";
      }
    }
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  }
  responses: {
    key: "429"
    value: {
      description: "Too Many Requests, try again after Retry-After."
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal Server Error"
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
  responses: {
    key: "503"
    value: {
      description: "Service Unavailable, try again after Retry-After."
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
};

///////////////////////////////////////////////////////////////////////////////
//
// Type Selectors
//
///////////////////////////////////////////////////////////////////////////////

message GuardSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  repeated Tag tags = 6;
}

message FeatureSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  repeated string names = 2;
  repeated Tag tags = 6;
}

message GuardFeatureSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string guard_name = 2 [(google.api.field_behavior) = REQUIRED];
  optional string feature_name = 3;
  repeated Tag tags = 6;
}

message GuardServiceSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string guard_name = 2 [(google.api.field_behavior) = REQUIRED];
  string service_name = 3 [(google.api.field_behavior) = REQUIRED];
  string service_release = 4 [(google.api.field_behavior) = REQUIRED];
  repeated Tag tags = 6;
}

message ServiceSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  optional string release = 3;
  repeated Tag tags = 6;
}

///////////////////////////////////////////////////////////////////////////////
//
// Health, State, and Tags
//
///////////////////////////////////////////////////////////////////////////////

enum Health {
  HEALTH_UNSPECIFIED = 0;
  HEALTH_OK = 1;
  HEALTH_OVERLOAD = 2;
  HEALTH_DOWN = 3;
}

message HealthByPriority {
  uint32 priority = 1;
  Health health = 2;
}

enum State {
  STATE_UNSPECIFIED = 0;
  STATE_ENABLED = 1;
  STATE_DISABLED = 2;
}

message Tag {
  string key = 1;
  string value = 2;
}

///////////////////////////////////////////////////////////////////////////////
//
// Reasons, Modes, and Decision Types
//
///////////////////////////////////////////////////////////////////////////////

enum Reason {
  REASON_UNSPECIFIED = 0;

  // Reasons returned by Stanza control plane -  SDK implementers do not need to label metrics with these reasons.
  REASON_SUFFICIENT_QUOTA = 1; // Sufficient standard quota exists to serve the request.
  REASON_INSUFFICIENT_QUOTA = 2; // Insufficient standard quota exists to serve the request without affecting higher-priority traffic.
  REASON_INSUFFICIENT_QUOTA_PARENT = 3; // Hierarchical quota - a child quota has sufficient quota but its parent does not.
  REASON_BURST = 4; // Insufficient standard quota exists to serve the request but there is sufficient burst quota.
  REASON_BEST_EFFORT = 5; // Hierarchical quota - a child quota has insufficient quota to serve the request, but it is permitted to exceed as parent quota is not fully used.
  REASON_QUOTA_CHECK_DISABLED = 6; // The guard has been configured not to check quota.
  REASON_QUOTA_UNKNOWN = 7; // The referenced quota configuration cannot be found.
  // next control plane reason: 8

  // Reasons assigned by Stanza SDKs - SDK implementers must abel metrics accordingly.
  REASON_FAIL_OPEN = 20; // SDK has failed-open because it cannot connect to Stanza. SDK implementers must label metrics: reason="fail_open"
  REASON_INVALID_TOKEN = 21; // SDK attempted to validate token, which was rejected by Stanza. SDK implementers must abel metrics: reason="invalid_token"
  REASON_CIRCUIT_BREAKING = 22; // SDK rejected request because of circuit breaking rules. SDK implementers must label metrics: reason="circuit_breaking"
  REASON_BULKHEAD = 23; // SDK rejected request because of bulkhead rules. SDK implementers must label metrics: reason="bulkhead"
  REASON_THROTTLING = 24; // SDK rejected request because of throttling rules. SDK implementers must label metrics: reason="throttling"
  REASON_SYSTEM_ADAPTIVE = 25; // SDK rejected request because of system load rules. SDK implementers must label metrics: reason="system_adaptive"

  // next SDK reason: 26
}

// This type describes what mode a Guard or Service is operating under.
enum Mode {
  MODE_UNSPECIFIED = 0;
  MODE_NORMAL = 1; // Normal operations - Stanza may shed requests according to its configuration. SDK implementers must label metrics: mode="normal"
  MODE_REPORT_ONLY = 2; // Report-only mode - Stanza never sheds requests, but does perform all processing and records metrics about the actions that would be taken if in normal mode. SDK implementers must label metrics: mode="report_only"
}

// This type describes where decisions about whether specific requests should proceed are made.
// The purpose of tracking these is to provide coherent application metrics for Stanza users.
enum DecisionType {
  DECISION_TYPE_UNSPECIFIED = 0;
  DECISION_TYPE_LOCAL = 1; // Decisions made within SDK, without Stanza control-plane involvement. SDK implementers must label metrics: decision_type="local"
  DECISION_TYPE_REMOTE = 2; // Decisions by Stanza control-plane. SDK implementers must label metrics: decision_type="remote"
}
