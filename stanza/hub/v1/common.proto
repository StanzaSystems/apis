syntax = "proto3";
package stanza.hub.v1;

import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "stanza/hub/v1;hubpb";
option java_multiple_files = true;
option java_package = "org.stanza.hub.v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Stanza Hub API",
    version: "1.0"
    contact: {
      name: "Stanza",
      url: "https://stanza.systems",
      email: "support@stanza.systems"
    }
  };
  external_docs: {
    url: "https://stanza.stoplight.io/docs/apis/291a2cff9d156-stanza-hub-api";
    description: "Stanza Hub API";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-Stanza-Key";
      }
    }
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  }
  responses: {
    key: "429"
    value: {
      description: "Too Many Requests, try again after Retry-After."
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal Server Error"
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
  responses: {
    key: "503"
    value: {
      description: "Service Unavailable, try again after Retry-After."
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"}
      }
    }
  }
};

///////////////////////////////////////////////////////////////////////////////
//
// Type Selectors
//
///////////////////////////////////////////////////////////////////////////////

message GuardSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  repeated Tag tags = 6;
}

message FeatureSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  repeated string names = 2;
  repeated Tag tags = 6;
}

message GuardFeatureSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string guard_name = 2 [(google.api.field_behavior) = REQUIRED];
  optional string feature_name = 3;
  repeated Tag tags = 6;
}

message GuardServiceSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string guard_name = 2 [(google.api.field_behavior) = REQUIRED];
  string service_name = 3 [(google.api.field_behavior) = REQUIRED];
  string service_release = 4 [(google.api.field_behavior) = REQUIRED];
  repeated Tag tags = 6;
}

message ServiceSelector {
  string environment = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  optional string release = 3;
  repeated Tag tags = 6;
}

///////////////////////////////////////////////////////////////////////////////
//
// Health, State, and Tags
//
///////////////////////////////////////////////////////////////////////////////

enum Health {
  HEALTH_UNSPECIFIED = 0;
  HEALTH_OK = 1;
  HEALTH_OVERLOAD = 2;
  HEALTH_DOWN = 3;
}

message HealthByPriority {
  uint32 priority = 1;
  Health health = 2;
}

enum State {
  STATE_UNSPECIFIED = 0;
  STATE_ENABLED = 1;
  STATE_DISABLED = 2;
}

message Tag {
  string key = 1;
  string value = 2;
}

///////////////////////////////////////////////////////////////////////////////
//
// Reasons and Modes
//
///////////////////////////////////////////////////////////////////////////////

// Config describes config state reasons used by Stanza SDKs
enum Config {
  CONFIG_UNSPECIFIED = 0;
  CONFIG_CACHED_OK = 1; // SDK has successfully fetched guard config previously and cached it
  CONFIG_FETCHED_OK = 2; // SDK has successfully fetched guard config in response to this request
  CONFIG_NOT_FOUND = 3; // SDK tried to fetch a Guard whose config could not be found
  CONFIG_FETCH_ERROR = 4; // SDK received an error from the Stanza control plane
  CONFIG_FETCH_TIMEOUT = 5; // SDK timed out trying to get config from the Stanza control plane
}

// Local describes Guard reasons used by Stanza SDKs
enum Local {
  LOCAL_UNSPECIFIED = 0;
  LOCAL_NOT_SUPPORTED = 1; // SDK does not support locally evaluated rules
  LOCAL_NOT_EVAL = 2; // SDK never evaluated (failed before local validation attempted)
  LOCAL_EVAL_DISABLED = 3; // No locally evaluated rules exist for this guard or it was explicitly disabled
  LOCAL_ALLOWED = 4; // Abstract “allowed” by all locally evaluated rules
  LOCAL_BLOCKED = 5; // Abstract “blocked” by any locally evaluated rule
  LOCAL_ERROR = 6; // SDK experienced some locally-sourced error and could not perform local rule evaluation
}

// Token describes Guard reasons used by Stanza SDKs
enum Token {
  TOKEN_UNSPECIFIED = 0;
  TOKEN_NOT_EVAL = 1; // SDK never evaluated (failed before token validation attempted)
  TOKEN_EVAL_DISABLED = 2; // Guard configuration does not include evaluating tokens
  TOKEN_NOT_VALID = 3; // Stanza control plane checked the token and responded that it was not valid
  TOKEN_VALID = 4; // Stanza control plane checked the token and responded that it was valid
  TOKEN_VALIDATION_ERROR = 5; // Stanza control plane responded with an error when validating token
  TOKEN_VALIDATION_TIMEOUT = 6; // Stanza control plane request to validate token timed out
}

// Quota describes Guard reasons used by Stanza SDKs
enum Quota {
  QUOTA_UNSPECIFIED = 0;
  QUOTA_NOT_EVAL = 1; // SDK never evaluated (failed before quota validation attempted)
  QUOTA_EVAL_DISABLED = 2; // Guard configuration does not include evaluating quota
  QUOTA_LOCAL_ERROR = 3; // SDK experienced some locally-sourced error and could not check quota
  QUOTA_BLOCKED = 4; // Stanza control plane checked quota and blocked the request
  QUOTA_GRANTED = 5; // Stanza control plane checked quota and granted the request
  QUOTA_ERROR = 6; // Stanza control plane responded with an error when checking quota
  QUOTA_TIMEOUT = 7; // Stanza control plane request to check quota timed out
}

// Mode describes what mode the Guard or Service is operating under.
enum Mode {
  MODE_UNSPECIFIED = 0;
  MODE_NORMAL = 1; // Normal, Stanza may shed requests according to its configuration
  MODE_REPORT_ONLY = 2; // Report-only, Stanza never sheds requests, but does perform all processing and records metrics about the actions that would be taken if in normal mode
}
